SCRIPT_DESCRIPTION
Test of step validate made to measure :
-> Conditional blocks
   Values of conditions : 
	Product order     (single-text)
	Priority          (numeric)
	Sales point       (single-text)
	Production site   (multi-text)
	Product           (multi-text)
	Product family    (multi-text)
	Product category  (list)
	Offer             (multi-text)
	Grading           (multi-text)
	Special grading 1 (multi-text)
	Special grading 2 (multi-text)
-> Two checkboxes (default unchecked)

SCRIPT_AUTHOR
r.bancal

SCRIPT_GROUPS
SANITYCHECK TESTS 

SCRIPT_START

	chapter -> ***** Step made to measure TEST ***** -> Web production process -> 

	callScript -> scripts.ResetProductionRules -> [ ltf-production-rules@framboise.com , !Lectra33! ] -> 

	channel -> start -> prodprocess -> https://cutting-room-production-process.dev.mylectra.com/ -> {"overspec":{"keepSizeAndPosition":false,"fullScreen":true,"protocol":"WEB"}}

	callScript -> subscript.Login -> [ ltf-production-rules@framboise.com , !Lectra33! ] -> 

	callScript -> subscript.activity_list.WaitForActivityListLoad -> [  ] -> 

	callScript -> subscript.activity_list.CheckActivityEnabledState -> [ validate-mtm-product , true ] -> 

	comment1 -> Initial state : two checkboxes unclicked

	callScript -> subscript.activity_list.SelectActivity -> [ validate-mtm-product ] -> 

	callScript -> subscript.result_block.IsCheckboxEmpty -> [ stopOnOutOfRangeWarning , 0 ] -> 

	callScript -> subscript.result_block.IsCheckboxEmpty -> [ stopOnIncorrectValueWarning , 0 ] -> 

	paragraph -> Check all options in conditional list of step MTM

	callScript -> subscript.step_mtm.CheckLeftOperands -> [  ] -> 

	paragraph -> Test edit mode and cancel

	callScript -> subscript.ribbon.ClickEdit -> [  ] -> 

	callScript -> subscript.result_block.ClickCheckbox -> [ stopOnOutOfRangeWarning , 0 ] -> 

	callScript -> subscript.result_block.IsCheckboxFilled -> [ stopOnOutOfRangeWarning , 0 ] -> 

	callScript -> subscript.activity_list.CheckActivityEditedState -> [ validate-mtm-product , true ] -> 

	callScript -> subscript.ribbon.ClickCancel -> [  ] -> 

	callScript -> subscript.result_block.IsCheckboxEmpty -> [ stopOnOutOfRangeWarning , 0 ] -> 

	callScript -> subscript.activity_list.CheckActivityEditedState -> [ validate-mtm-product , false ] -> 

	callScript -> subscript.ribbon.ClickEdit -> [  ] -> 

	callScript -> subscript.result_block.ClickCheckbox -> [ stopOnOutOfRangeWarning , 0 ] -> 

	callScript -> subscript.result_block.ClickCheckbox -> [ stopOnIncorrectValueWarning , 0 ] -> 

	callScript -> subscript.activity_list.CheckActivityEditedState -> [ validate-mtm-product , true ] -> 

	paragraph -> Add conditional block with two conditions

	callScript -> subscript.conditions.AddFirstCondition -> [  ] -> 

	callScript -> subscript.activity_list.CheckActivityInError -> [ validate-mtm-product ] -> 

	callScript -> subscript.conditions.FillCondition -> [ 0-0 , command.priority , Above , 3 ] -> 

	callScript -> subscript.conditions.AddCondition -> [ 0-0 ] -> 

	callScript -> subscript.conditions.FillConditionList -> [ 0-1 , product.category , Equals , Skirt ] -> 

	comment1 -> Remove the product category and check the activity is in error

	callScript -> subscript.conditions.RemoveRightOperandList -> [ 0-1 ] -> 

	callScript -> subscript.activity_list.CheckActivityInError -> [ validate-mtm-product ] -> 

	callScript -> subscript.conditions.FillRightOperandList -> [ 0-1 , Coat ] -> 

	callScript -> subscript.result_block.ClickCheckbox -> [ stopOnOutOfRangeWarning , 0 ] -> 

	paragraph -> Add another conditional block

	callScript -> subscript.conditions.AddCondition -> [ else ] -> 

	callScript -> subscript.conditions.FillCondition -> [ 1-0 , product.offerReference , Different , somthing_duh ] -> 

	callScript -> subscript.ribbon.ClickSave -> [  ] -> 

	paragraph -> Check state of activity after saving

	callScript -> subscript.activity_list.CheckActivityEditedState -> [ validate-mtm-product , false ] -> 

	callScript -> subscript.conditions.CheckCondition -> [ 0-0 , command.priority , Above , 3 ] -> 

	callScript -> subscript.conditions.CheckConditionList -> [ 0-1 , product.category , Equals , Coat ] -> 

	callScript -> subscript.conditions.CheckCondition -> [ 1-0 , product.offerReference , Different , somthing_duh ] -> 

	callScript -> subscript.result_block.IsCheckboxFilled -> [ stopOnOutOfRangeWarning , 0 ] -> 

	callScript -> subscript.result_block.IsCheckboxEmpty -> [ stopOnIncorrectValueWarning , 0 ] -> 

	callScript -> subscript.result_block.IsCheckboxEmpty -> [ stopOnOutOfRangeWarning , 1 ] -> 

	callScript -> subscript.result_block.IsCheckboxEmpty -> [ stopOnIncorrectValueWarning , 1 ] -> 

	callScript -> subscript.result_block.IsCheckboxFilled -> [ stopOnOutOfRangeWarning , 2 ] -> 

	callScript -> subscript.result_block.IsCheckboxFilled -> [ stopOnIncorrectValueWarning , 2 ] -> 

	paragraph -> Test online help

	callScript -> subscript.ribbon.CheckOnlineHelp -> [ validate-mtm-product , stopOnOutOfRangeWarning ] -> 

	channel -> close -> prodprocess

	comment1 -> Test sucess !
