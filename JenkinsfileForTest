def dockerArtifactoryTag = env.BRANCH_NAME == "master" ? "latest" : "${env.BRANCH_NAME}".replaceFirst(/^.*\//, "")
def dockerArtifactoryPush = env.BRANCH_NAME == "master"
String namespace = "cutting-room-admin";
String lectraChartVersion = "1.0";

pipeline {

    environment {
        COMPONENT_NAME = "cutting-room-production-process"
        PROJECT_NAME = "cutting-room-production-process"
        DOCKER_IMAGE_NAME = "cutting-room-admin-cutting-room-production-process"
        DNS_PREFIX = "cutting-room-production-process"
    }
    
    parameters {
        string(name: 'ADD_ON_MAX_TRY', defaultValue: '30', description: 'maxTry value')
        booleanParam(name: 'RECORD_ANIMATION', defaultValue: false, description: 'Record video of tests (increases test duration !)')
    }

    triggers {
        cron(env.BRANCH_NAME == "master" ? "H 19 * * *" : "")
    }

    agent {
        label 'docker&&linux'
    }

    options {
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '5'))
        disableConcurrentBuilds()
        skipDefaultCheckout()
    }
    
    stages {

        stage("checkout") {
            steps {
                cleanWs()
                checkoutScm()
                postGitLabStatus("running")
        
            }
        }

        stage("build") {
            steps {
                jenkinsAlert(env.COMPONENT_NAME, "build") {
                    script {
                        dockerArtifactoryImageName = dockerBuild(
                            imageName : "${env.DOCKER_IMAGE_NAME}",
                            version : "${dockerArtifactoryTag}",
                            registry : DockerEnvironment.ARTIFACTORY_REGISTRY_JENKINS,
                            push : "${dockerArtifactoryPush}",
                            multiStage : true,
                            insideReportPath : "/usr/app/reports"
                        )
                    }
                }
            }
            post {
                always {
                    junit allowEmptyResults: true, testResults: 'multi-stage-reports/*test-results.xml'
                    coberturaPublisher 'multi-stage-reports/*-coverage/cobertura-coverage.xml'
                }
            }
        }

       

    post {
        success {
            cleanWs()
            postGitLabStatus("success")
        }
    }
}

}